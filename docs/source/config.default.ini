[paths]
name_authority = bwauthority
sbws_home = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/${name_authority}
datadir = ${sbws_home}/datadir
v3bw_dname = ${sbws_home}
# THE LIST OF RELAYS TO MEASURE BY THIS AUTHORITY:
relays_to_measure_path = ${sbws_home}/relays_to_measure.txt
# The latest bandwidth file is atomically symlinked to
# V3BandwidthsFile ${v3bw_dname}/latest.v3bw
# The same observation file for all bandwidth authorities:
observation_file = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/observations.txt
consensus_file = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/v3bw
observed_bandwidth = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/true_capacities.txt
estimates_file = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/estimates.txt

weight_first = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/weight_used_first
weight_second = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/weight_used_second
weight_third = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/weight_used_third

#par1gc = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par1gc
#par1mc = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par1mc
#par1ec = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par1ec
#par2gc = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par2gc
#par2mc = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par2mc
#par2ec = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/par2ec

# v3bw_fname = ${v3bw_dname}/{}.v3bw
v3bw_fname = ~/simulation_3relays/3relays_sbws_final/shadow.data/hosts/bwauthority/v3bw_{}
state_fname = ${sbws_home}/state.dat
log_dname = ${sbws_home}/log
generator = no

[destinations]
server1 = on


[destinations.server1]
# the domain and path to the 1GB file.
url = http://103.202.216.209:80/sbws.bin
# Whether to verify or not the TLS certificate. Default True
verify = False
# ISO 3166-1 alpha-2 country code where the Web server destination is located.
# Default AA, to detect it was not edited.
# Use ZZ if the location is unknown (for instance, a CDN).
country = ZZ

[general]
# TIME OF EACH EPOCH IN MINUTES:
data_period = 2 
# TOTAL NUMBER OF EPOCH:
number_epochs = 5
# TIME A PROBER IS UP IN SECONDS:
http_timeout = 30 
# TIMECONSIDERED FROM PROBER BANDWIDTH TO COMPUTE THE OBSERVATION:
observation_compute = 10 
# window in tgen to calculate the observation
# Timeout in seconds for waiting on a circuit to be built. It MUST be an
# **int**. We will use this both as the CircuitBuildTimeout and a timeout
# to give to stem for waiting on a circuit to be built since
# CircuitBuildTimeout doesn't handle the case of a TLS connection to a relay
# taking forever, and probably other not-yet-discovered cases. NOT NEEDED
circuit_timeout = 60 
# NOT NEEDED
# Whether or not to reset the bandwidth measurements when the relay's IP
# address changes. If it changes, we only consider results for the relay that
# we obtained while the relay was located at its most recent IP address.
# This is NOT implemented for IPv6. NOT NEEDED
reset_bw_ipv4_changes = off 
reset_bw_ipv6_changes = off 

[scanner]
# A human-readable string with chars in a-zA-Z0-9 to identify your scanner
nickname = new_sbws
# ISO 3166-1 alpha-2 country code. To be edited.
# Default to a non existing country to detect it was not edited.
country = FR
# Limits on what download times are too fast/slow/etc.
download_toofast = 1
download_min = 20
download_target = 25
download_max = 30
# How many RTT measurements to make
num_rtts = 0
# Number of downloads with acceptable times we must have for a relay before
# moving on
num_downloads = 1
# The number of bytes to initially request from the server
initial_read_request = 16384
# How many measurements to make in parallel
measurement_threads = 1
# Minimum number of bytes we should ever try to download in a measurement
min_download_size = 1
# Maximum number of bytes we should ever try to download in a measurement
# 1073741824 == 1 GiB
max_download_size = 1073741824

[tor]
datadir = ${paths:sbws_home}/tor
run_dpath = ${datadir}
control_socket = ${tor:run_dpath}/control
pid = ${tor:run_dpath}/tor.pid
# note this is a directory
log = ${tor:datadir}/log
external_control_port = 9051
extra_lines = 

[cleanup]
# After this many days, compress data files
# #40017: To generate files as Torflow the result files must be kept for
# GENERATE_PERIOD seconds.
# The number of days after they are compressed or deleted could be added
# as defaults (currently globals.py), and just as a factor of GENERATE_PERIOD.
data_files_compress_after_days = 29
# After this many days, delete data files.
# 57 == 28 * 2 + 1.
data_files_delete_after_days = 57
# After this many days, compress v3bw files (1d)
v3bw_files_compress_after_days = 1
# After this many days, delete v3bw files (7d)
v3bw_files_delete_after_days = 7

[relayprioritizer]
# Whether or not to measure authorities
measure_authorities = off
# The target fraction of best priority relays we would like to return.
# 0.05 is 5%. In a 7000 relay network, 5% is 350 relays.
#
# In a network of ~6500 relays and with a ResultDump containing 1 result per
# relay, the best_priority() function takes ~11 seconds to complete on my
# home desktop. Using this parameter allows us to balance between calling
# best_priority() more often (but wasting more CPU), and calling it less
# often (but taking longer to get back to relays with non-successful results).
#
# Alternatively, we could rewrite best_priority() to not suck so much.
fraction_relays = 1.00
# The minimum number of best priority relays we are willing to return
min_relays = 16

[logging]
# Whether or not to log to a rotating file the directory paths.log_dname
to_file = yes
# Whether or not to log to stdout
to_stdout = yes
# Whether or not to log to syslog
# NOTE that when sbws is launched by systemd, stdout goes to journal and
# syslog.
to_syslog = no
# If logging to file, how large (in bytes) should the file be allowed to get
# before rotating to a new one. 10485760 is 10 MiB. If zero or number of
# backups is zero, never rotate the log file.
to_file_max_bytes = 10485760
# If logging to file, how many backups to keep. If zero or max bytes is zero,
# never rotate the log file.
to_file_num_backups = 50
# Level to log at. Debug, info, warning, error, critical.
# `level` must be set to the lower of all the handler levels.
level = debug
to_file_level = debug
to_stdout_level = debug
to_syslog_level = info
# Format string to use when logging
format = %(asctime)s %(module)s[%(process)s]: <%(levelname)s> (%(threadName)s) %(message)s
to_stdout_format = ${format}
to_syslog_format = %(module)s[%(process)s]: <%(levelname)s> %(message)s
# verbose formatter useful for debugging
to_file_format = %(asctime)s %(levelname)s (%(threadName)s) %(filename)s:%(lineno)s - %(funcName)s - %(message)s
